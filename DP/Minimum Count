Given an integer N, find and return the count of minimum numbers required to represent N as a sum of squares.
That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. The output will be 1, as 1 is the minimum count of numbers required to represent N as sum of squares.
Input format :
The first and the only line of input contains an integer value, 'N'.
 Output format :
Print the minimum count of numbers required.
Constraints :
0 <= n <= 10 ^ 4

Time Limit: 1 sec
Sample Input 1 :
12
Sample Output 1 :
3
Explanation of Sample Output 1 :
12 can be represented as : 
A) (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2)

B) (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2)  + (2 ^ 2)

C) (1^2) + (1^2) + (1^2) + (1^2) + (2 ^ 2) + (2 ^ 2)

D) (2 ^ 2) + (2 ^ 2) + (2 ^ 2)

As we can see, the output should be 3.
Sample Input 2 :
9
Sample Output 2 :
1
-----------------------------------

#include<cmath>
//approach 4 : legendre's 3 square theorem
int minCount(int n){
    if(ceil(sqrt(n))==floor(sqrt(n))) return 1;
    while(n%4==0) n/=4;
    if(n%8==7) return 4;
    for(int i=1;i*i<=n;i++){
        int base = sqrt(n-i*i);
        if(base * base == (n-i*i)) return 2;
    }
    return 3;
}
/*
//approach 3 : dp tabulation
int minCount(int n){
    int dp[n+1];
    dp[0]=0;
    for(int i=1;i<=n;i++){
        dp[i]=i;
        for(int j=1;j*j<=i;j++){
            int sq = j*j;
            dp[i] = min(dp[i],1+dp[i-sq]);
        }
    }
    return dp[n];
}


//approach 2 : recursion+memoization
  vector<int> dp;
  int solve(int n){
      if(n<=3) return n;
      if(dp[n]!=-1) return dp[n];
      int ans = n;
      for(int i=1;i*i<=n;i++){
          ans = min(ans,solve(n-i*i)+1);
      }
      dp[n]=ans;
      return ans;
  }
int minCount(int n){
    dp.resize(n+1,-1);
    int ans = solve(n);
    return ans;
}

//approach 1 - recursion (it will give TLE)
int solve(int n){
    if(n<=3) return n;
    int ans=n;
    for(int i=1;i*i<=n;i++){
        ans = min(ans,1+solve(n-i*i));
    }
    return ans;
}
int minCount(int n)
{
	//Write your code here
    int ans = solve(n);
    return ans;
    
}
*/
