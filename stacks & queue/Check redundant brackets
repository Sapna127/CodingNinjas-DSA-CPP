For a given expression in the form of a string, find if there exist any redundant brackets or not. It is given that the expression contains only rounded brackets or parenthesis and the input expression will always be balanced.
A pair of the bracket is said to be redundant when a sub-expression is surrounded by unnecessary or needless brackets.
Example:
Expression: (a+b)+c
Since there are no needless brackets, hence, the output must be 'false'.

Expression: ((a+b))
The expression can be reduced to (a+b). Hence the expression has redundant brackets and the output will be 'true'.

---------------------------


#include <stack>
bool checkRedundantBrackets(string input)
{
    stack<char> s;
    int i = 0;
    int count = 0;
    while (input[i] != '\0')
    {
        while (input[i] != ')')
        {
            if (input[i] == '\0')
            {
                return false;
            }
            s.push(input[i]);
            i++;
        }
        if (input[i] == ')')
        {
            if (s.empty())
                return false;
            while (s.top() != '(')
            {
                s.pop();
                count++;
            }
            if (count == 0 || count == 1)
            {
                return true;
            }
            else
            {
                s.pop();
                count = 0;
            }
        }
        i++;
    }
    return false;
}
