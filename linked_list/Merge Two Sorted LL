You have been given two sorted(in ascending order) singly linked lists of integers.
Write a function to merge them in such a way that the resulting singly linked list is also
sorted(in ascending order) and return the new head to the list.

--------------------------------
//iterative aprroach

Node* mergeTwoLLs(Node *head1, Node *head2) {
    

    Node *p=NULL,*q=NULL;
    if(head1->data<head2->data)
    {
        p=head1;
        q=head1;
        head1=head1->next;
        
        
    }
    else if(head1->data>=head2->data)
    {
        p=head2;
        q=head2;
        head2=head2->next;
       
        
    }
    while(head1&&head2)
    {
       if(head1->data<head2->data)
       {
           q->next=head1;
           q=head1;
           head1=head1->next;
           q->next=NULL;
       }
    else if(head1->data>=head2->data)
       {
           q->next=head2;
           q=head2;
           head2=head2->next;
           q->next=NULL;
       }
    }
    if(head1)
        q->next=head1;
    if(head2)
        q->next=head2;
    
    
    return p;
}

-----------------------------
//recursive approach
Node *mergeTwoSortedLinkedLists(Node *a, Node *b)
{
      Node* result = NULL;
     
    /* Base cases */
    if (a == NULL)
        return(b);
    else if (b == NULL)
        return(a);
     
    /* Pick either a or b, and recur */
    if (a->data <= b->data)
    {
        result = a;
        result->next = mergeTwoSortedLinkedLists(a->next, b);
    }
    else
    {
        result = b;
        result->next = mergeTwoSortedLinkedLists(a, b->next);
    }
    return(result);
}
