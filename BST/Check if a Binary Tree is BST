Given a binary tree with N number of nodes, check if that input tree is BST (Binary Search Tree).
If yes, return true, return false otherwise.
Note: Duplicate elements should be kept in the right subtree.

------------------

#include<limits.h>

bool isBST(BinaryTreeNode<int> *root, int min = INT_MIN, int max = INT_MAX)
{
	if (root == NULL)
		return true;
	if (root->data < min || root->data > max)
	{
		return false;
	}
	bool isLeftOk = isBST(root->left, min, root->data - 1);
	bool isRightOk = isBST(root->right, root->data, max);
	return isLeftOk && isRightOk;
}

/*
//solution 2 
//complexity O(n)
#include<limits.h>
int minimum(BinaryTreeNode<int>* root){
    if(root==NULL)
        return INT_MAX;
    return min(root->data,min(minimum(root->left),minimum(root->right)));
}

int maximum(BinaryTreeNode<int>* root){
    if(root==NULL)
        return INT_MIN;
    return max(root->data,max(maximum(root->left),maximum(root->right)));
}

class IsBSTReturn{
	public:
	bool isBST;
	int minimum;
	int maximum;
};
IsBSTReturn isBST2(BinaryTreeNode<int> *root){
	if(root==NULL){
		IsBSTReturn output;
		output.isBST = true;
		output.minimum = INT_MAX;
		output.maximum = INT_MIN;
		return output;
	}
	IsBSTReturn leftOutput = isBST2(root->left);
	IsBSTReturn rightOutput = isBST2(root->right);
	int minimum = min(root->data , min(leftOutput.minimum, rightOutput.minimum));
	int maximum = max(root->data, max(leftOutput.maximum,rightOutput.maximum));
	bool isBSTFinal = (root->data > leftOutput.maximum) && (root->data <= rightOutput.minimum) && 
	  leftOutput.isBST && rightOutput.isBST;
	  IsBSTReturn output;
	  output.minimum = minimum;
	  output.maximum = maximum;
	  output.isBST = isBSTFinal;
	  return output;
}
bool isBST(BinaryTreeNode<int>* root) {
	if (root == NULL) {
		return true;
	}

	int leftMax = maximum(root->left);
	int rightMin = minimum(root->right);
	bool output = (root->data > leftMax) && (root->data <= rightMin) && isBST(root->left) && isBST(root->right);
	return output;
}

/*
//solution 1: 
//complexity O(nh)

#include<limits.h>
int minimum(BinaryTreeNode<int>* root){
    if(root==NULL)
        return INT_MAX;
    return min(root->data,min(minimum(root->left),minimum(root->right)));
}

int maximum(BinaryTreeNode<int>* root){
    if(root==NULL)
        return INT_MIN;
    return max(root->data,max(maximum(root->left),maximum(root->right)));
}
bool isBST(BinaryTreeNode<int> *root) {
	// Write your code here
    if(root==NULL)
        return true;
    int leftMax = maximum(root->left);
    int rightMin = minimum(root->right);
    bool output = (root->data > leftMax) && (root->data <= rightMin) && isBST(root->right) && isBST(root->left);
    return output;
}
*/
